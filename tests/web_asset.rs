#![allow(unused_imports)]
#![allow(unused_variables)]
#![cfg(all(target_arch = "wasm32"))]
use std::{assert_eq, str::FromStr, vec};

use bdk::blockchain::EsploraBlockchain;
use bitcoin::{consensus, Transaction};
use bitmask_core::{
    debug, info,
    rgb::{prefetch::prefetch_resolve_txs, resolvers::ExplorerResolver},
    structs::{
        EncryptedWalletData, FundVaultDetails, ImportRequest, ImportType, MnemonicSeedData,
        WalletData,
    },
    web::{
        bitcoin::{get_assets_vault, get_encrypted_wallet, get_wallet_data, save_mnemonic_seed},
        json_parse, resolve,
        rgb::import_contract,
        set_panic_hook,
    },
};
use wasm_bindgen::prelude::*;
use wasm_bindgen_futures::JsFuture;
use wasm_bindgen_test::*;
use web_sys::console;

wasm_bindgen_test_configure!(run_in_browser);

const ENCRYPTION_PASSWORD: &str = "hunter2";
const SEED_PASSWORD: &str = "";

#[wasm_bindgen_test]
async fn contract_legacy_import() {
    set_panic_hook();
    let mnemonic = env!("TEST_WALLET_SEED", "TEST_WALLET_SEED variable not set");

    info!("Import wallet");
    let mnemonic_data_str = resolve(save_mnemonic_seed(
        mnemonic.to_owned(),
        ENCRYPTION_PASSWORD.to_owned(),
        SEED_PASSWORD.to_owned(),
    ))
    .await;
    let mnemonic_data: MnemonicSeedData = json_parse(&mnemonic_data_str);

    info!("Get vault properties");
    let vault_str: JsValue = resolve(get_encrypted_wallet(
        ENCRYPTION_PASSWORD.to_owned(),
        mnemonic_data.serialized_encrypted_message,
    ))
    .await;
    let wallet_data: EncryptedWalletData = json_parse(&vault_str);

    info!("Import Contract");
    let sk = wallet_data.private.nostr_prv;
    let contract_import = ImportRequest {
        import: ImportType::Contract,
        data: "rgb1qyqqqqqqqgqqqpsmcnyz6cttkweyl4dn8wnw28ay8ttnxaatpn2v7j0e4g26za9lqyqqzq8s6w527336v080cj36yyk5nay3xurk57r7d7y0np3s85yx8hw2xqqsqqgqqqqssqxxhhhxyjq4x8c0tcr43ndxsczncpgvflz26yse5hzm3edlmsdkkypqqqqpqqqsqqgqqyqqzqqpqqqqzq8lluqqqqgqqrrtmmnzfq2nru84up6cekngvpfuq5xyl39dzgv6t3dcuklacxmtzqqpqqqqzq8lluqsqqqpqrll7qq0qqqqvx7yeqkkz6ankf8atvem5mj3lfp66ueh02cv6n85n7d2zkshf0cppdfywsjrdah8gunpvd6qwnn0d45kuctvqczqvarfvd4k2u5juaw2s7sdghhnr8wewwgzmrdz6f5zunr7y0050xl7005y9xp4qczxuctdv5lygmcqftye3r2x77t9gndejzyawrylu4xec2et58jh70l9atf46pmyv46xz6tvwvm9vy7qx9pe97tndvgtqdnydluke6ncsksecx0jphaafdnyqd8y5ztswfjkx6tnd9hka325zw8w2ql9a6h2uq66xqulexwzqlf8t8g3ajpempygyhu9wn99p329a0sk6uufkedaj4s4wu97alhzspl73qrvpegdwfj5hf0chaqsqzrpekgrmua5lw6ds2xnt3fljahrlqwuncgcyze25anxrexj3gj4zqqsqqqqqqqqqqpgqqqqqqqqqqqrv4sncqc58yhewd43pvpkv3hljm820zz6r8qe7gxlh49kvsp5ujsqqspqqprwdahxt34aae3ys9f37r67qavvmf5xq57q2rz0cjk3yxd9ckuwt07urd43qyz8xmmdvhg2pwkt2er52tw9xk4n49f456v62hagdlerjy5hrxlju5qyvw2pg0jyduqy4jvc34r009j5fkuepzwhpj072nvu9v46retl8lj7456aqy94y36zgdhkuarjv93hgrzrdah8gunpvd6yuctdv5zszrz5t6lpd4ecndjmm9tp2actamlw9qrlazqxcrjs6un9fwjl306p8e2cl7s0psuvy2mphex3zzufx62d28znf3cx7dy27vfj28kfqvmqqzrpekgrmua5lw6ds2xnt3fljahrlqwuncgcyze25anxrexj3gj4zqqqqqqqqqqqqq8lluqqqqqqqqqygmamwxuzwqm7dhmls8vrs2yrvhs49wjdcsrddfpeyrwf3fkx7fgqppsumypa7w60hdxc9rf4c5lewm3ls8wfuyvzpv42wenpunfg5f23q2qqqqqqqqqqqrlsqqqqqqqqqqz4wlhzzwy4amf6ff8gytdheas83a94ugxhwfct50qsh7yh83kdfvqqxcqrtuenygqrtuenxggrtuenggsrtuen2gcrtuenvfqrtuenwfgrtuensfsrtuenjfcrtu6rq2qrtu6rz2grtu6ry2srtu6rx2crtu6rgtqrtu6r2tgrtu6rvtsrtu6rwtcrtu6rsvqrtu6rjvgrtu6nqvsrtu6nzvcrtu6nydqrtu6nxdgrtu6ngdsrtu6n2dcrtu6nvwqrtu6nwwgrtu6nswsrtu6njwcrtumrq0qrtumrz0grtumry0srtumrx0crtumrgsqrtumr2sgrtumrvssrtumrwscrtumrs3qrtumrj3grtumnq3srtumnz3crtumnyjqrtumnxjgrtumngjsrtumn2jcrtumnvnqrtumnwngrtumnsnsrtumnjncrtuurq5qrtuurz5grtuury5srtuurx5crtuurg4qrtuur24grtuurv4srtuurw4crtuurskqrtuurjkgrtuunqksrtuunzkcrtuunyhqrtuunxhgrtuunghsrtuun2hcrtuunvcqrtuunwcgrtuunscsrtuunjccytucnqvryq30nzvp3v5z97vfsxfnqghe3xqekwpzlxycrg6qytucnqdtfq30nzvpkdgz97vfsxa4sghe3xquxcpzlxycrjmgytucnzvrwq30nzvf3duz97vf3xfcqghe3xyehzpzlxycngusytucnzdtnq30nzvfkwsz97vf3xa6sghe3xyu8vpzlxycnjacytucnyvrcq30nzv330yz97vfjxfaqghe3xgehkpzlxyerglqytucnydtaq30nzv3k0cz97vfjxal4e5xrcrdkwl3zt4gvpn245w8a9fua8g5avf0rfaudl4skds7tspsqpp2h0m3p8z27a5ay5n5z9kmu7crc7j67yrthyu968sgtlztncmx5kqgqqqqqqqqqqqyqqqqqqqqqqqrpekgrmua5lw6ds2xnt3fljahrlqwuncgcyze25anxrexj3gj4zqqqzm7xjcmsdgggxsspn683d8d8aay23apu32qcsvjydulwz75t2wduqy94y36zgdhkuarjv93hgr6rdah8gunpvd6yget5v95kcuc9q9zxlwm3hqnsxlnd7lupmquz3qm9u9ft5nwyqmt2gwfqmjv2d3hjtyh8tj585r29aucemktnjqkcmgkjdqhycl3rmarehlnmappfsdgxqy94y36zgdhkuarjv93hgpj5d93kketjq5q4e5xrcrdkwl3zt4gvpn245w8a9fua8g5avf0rfaudl4skds7tspk92sfcaegruhh2atsrtgcrnlyecgrayavaz8kg88vy3qjls46v55qsk5j8gfpk7mn5wfskxaqf2pex2cmfwd5k7msrzv9kjmnyd9mxjumfvfkx2qqyv3jkx6gpq43k2mn5dypq2mtfd3kxjqcfv3jkx62dd9kxc6gypf3k2mn5d9xkjmrvdyzs2mtfvdex7psfv3jkx62dd93hymc8pf3k2mn5d9xkjcmjduyqgmnpdehsjzryv43kjnnpdehs5ztrv4h8g62wv9hx7zcywp5kxmcvppjx2cmf2p5kxmcdp93k2mn5d9gxjcm0pczkvetdw3hs7ztyv43kj3n9d46x7yq2vdjkuarfgejk6ar0zyzxzar5dufvd00wvfyp2v0s7hs8trx6dps98szscn7y45fpnfw9hrjmlhqmdvgqqqqdpg96edtyw3fdc566kw54xknfnf2l4phlywgjjuvm7tjsq33eg9qqq5qkl35kxur2zzp5yqv73utfmfl0fz50g0y2sxyry3r08msh4z6nn08s6w527336v080cj36yyk5nay3xurk57r7d7y0np3s85yx8hw2xqqsk5j8gfpk7mn5wfskxaqvgdhkuarjv93hg4r90p6q2qf72k8l5rcv8rpzkcd7f5gshzfkjn23c56vwphnfzhnzvj3ajgrxcqqzr3858wl55asyyq4qdxl3gpce25ypkwk287j9d42d7yjje4d74n7psqqx5j8ggpsp5qqqqqqqqqpqqzqqqqwy7sam7jnkqssz5p5m79q8r92ssxe6egl6g4k4fhcj2tx4h6k0cqqqqfrvsqltt6y89ajj04equa3sj2q077ekz0gkf7jz3c2ndt4zprltvqq25j8ggerqqsvgdhkuarjv93hg4r90p6qruxn4zh5vwnrem7y5w3p94ylfyfhqa48sln03rucvvpapp3amj3sqyr5ummdd9hxzmqpqcdufjpdv94m8vj06kenhfh9r7jr44enw74se4x0f8u659dpwjlszqgxg9ehxet5wvqqyqqqqgxyxmmww3exzcm523jhsaqpqqqsqp6wdakkjmnpdsqsqqgqqyryzumnv468xqgqlllsqqgg23exzmnnvejhyqqqqyryzumnv468xqgqlllszpjpwdek2arnqyq0llcqqyryzumnv468xqqppp28yctwwdnx2usqee7930qcne0y502uatn44hk7rycm7fjg5utgyns54208jm2uj8sjxeqp7kh5gwtm9yltjpemrpy5qlaanvy73vnay9rs4x6h2yz87kczqqqqwnn0d45kuctvqyqqcsm0de68yctrw32x27r5qyqqqpjpwdek2arnqqqsqqqg23exzmnnvejhyqqqqqqvulzchsvfuhj284ww4e66mm0pjvdlyey2w95zfc2248ned4wfrcgqqqqqyqqqqyqquqq9g3y5ysf3q4zyjsjpxyqqyqgqqyqqwqq9qpzyjsjpxyqsqqqpqyqqxqgqxhfkdexsz66f5gskfyrrl0ac9carht2fzcrcx66fxay5x0rpnvqqqqqqmakhudm7a6vwjzq9qqqqqqqqqqq2m28m4eqgv3q6dtlkc0gedrtsaja7gj7hs24amzuwn3nv77zvfmqqqqqqqqqqqqqqqqqqqqqqqkar9kx".to_string(),
    };

    let req = serde_wasm_bindgen::to_value(&contract_import).expect("oh no!");
    let _ = resolve(import_contract(sk, req)).await;
}

#[wasm_bindgen_test]
async fn contract_strict_import() {
    set_panic_hook();
    let mnemonic = env!("TEST_WALLET_SEED", "TEST_WALLET_SEED variable not set");

    info!("Import wallet");
    let mnemonic_data_str = resolve(save_mnemonic_seed(
        mnemonic.to_owned(),
        ENCRYPTION_PASSWORD.to_owned(),
        SEED_PASSWORD.to_owned(),
    ))
    .await;
    let mnemonic_data: MnemonicSeedData = json_parse(&mnemonic_data_str);

    info!("Get vault properties");
    let vault_str: JsValue = resolve(get_encrypted_wallet(
        ENCRYPTION_PASSWORD.to_owned(),
        mnemonic_data.serialized_encrypted_message,
    ))
    .await;
    let wallet_data: EncryptedWalletData = json_parse(&vault_str);

    info!("Import Contract");
    let sk = wallet_data.private.nostr_prv;
    let contract_import = ImportRequest {
        import: ImportType::Contract,
        data: "0100000000020000061bc4c82d616bb3b24fd5b33ba6e51fa43ad73377ab0cd4cf49f9aa15a174bf01000100f0d3a8af463a63cefc4a3a212d49f49137076a787e6f88f986303d0863ddca300100010000010800c6bdee62481531f0f5e0758cda686053c050c4fc4ad1219a5c5b8e5bfdc1b6b1020000010001000100010001000100000100ffff0000010000c6bdee62481531f0f5e0758cda686053c050c4fc4ad1219a5c5b8e5bfdc1b6b1000100000100ffff0100000100ffff000f0000061bc4c82d616bb3b24fd5b33ba6e51fa43ad73377ab0cd4cf49f9aa15a174bf010b524742436f6e7472616374074e6f6d696e616c0604067469636b657292e75ca87a0d45ef319dd973902d8da2d2682e4c7e23df479bfe7be842983506046e616d653e446f004ac9988d46f796544db99089d70c9fe54d9c2b2ba1e57f3fe5ead35d0764657461696c73365613c0314392f9736b10b036646ff96cea7885a19c19f20dfbd4b664034e4a09707265636973696f6ec554138ee503e5eeaeae035a3039fc99c207d2759d11ec839d848825f8574ca50c545ebe16d7389b65bd95615770beefee2807fe8806c0e50d72654ba5f8bf41000861cd903df3b4fbb4d828d35c53f976e3f81dc9e11820b2aa76661e4d28a2551001000000000000002800000000000000365613c0314392f9736b10b036646ff96cea7885a19c19f20dfbd4b664034e4a00040200046e6f6e65c6bdee62481531f0f5e0758cda686053c050c4fc4ad1219a5c5b8e5bfdc1b6b10104736f6d65d0a0bacb5647452dc535ab3a9535a699a55fa86ff239129719bf2e50046394143e446f004ac9988d46f796544db99089d70c9fe54d9c2b2ba1e57f3fe5ead35d010b524742436f6e74726163740c436f6e74726163744e616d6505010c545ebe16d7389b65bd95615770beefee2807fe8806c0e50d72654ba5f8bf413e558ffa0f0c38c22b61be4d110b893694d51c534c706f348af313251ec90336000861cd903df3b4fbb4d828d35c53f976e3f81dc9e11820b2aa76661e4d28a255100000000000000000ffff000000000000446fbb71b827037e6df7f81d838288365e152ba4dc406d6a43920dc98a6c6f25000861cd903df3b4fbb4d828d35c53f976e3f81dc9e11820b2aa76661e4d28a255102800000000000000ff000000000000005577ee213895eed3a4a4e822db7cf6078f4b5e20d77270ba3c10bf8973c6cd4b000360035f333220035f333321035f333422035f333523035f333624035f333725035f333826035f333927035f343028035f343129035f34322a035f34332b035f34342c035f34352d035f34362e035f34372f035f343830035f343931035f353032035f353133035f353234035f353335035f353436035f353537035f353638035f353739035f35383a035f35393b035f36303c035f36313d035f36323e035f36333f035f363440035f363541035f363642035f363743035f363844035f363945035f373046035f373147035f373248035f373349035f37344a035f37354b035f37364c035f37374d035f37384e035f37394f035f383050035f383151035f383252035f383353035f383454035f383555035f383656035f383757035f383858035f383959035f39305a035f39315b035f39325c035f39335d035f39345e035f39355f035f393660035f393761035f393862035f393963045f31303064045f31303165045f31303266045f31303367045f31303468045f31303569045f3130366a045f3130376b045f3130386c045f3130396d045f3131306e045f3131316f045f31313270045f31313371045f31313472045f31313573045f31313674045f31313775045f31313876045f31313977045f31323078045f31323179045f3132327a045f3132337b045f3132347c045f3132357d045f3132367e045f3132377f5cd0c3c0db677e225d50c0cd55a38fd2a79d3a29d625e34f78dfd6166c3cb80600085577ee213895eed3a4a4e822db7cf6078f4b5e20d77270ba3c10bf8973c6cd4b0100000000000000080000000000000061cd903df3b4fbb4d828d35c53f976e3f81dc9e11820b2aa76661e4d28a2551000016fc6963706a108342019e8f169da7ef48a8f43c8a818832446f3ee17a8b539bc010b524742436f6e74726163740f436f6e747261637444657461696c730501446fbb71b827037e6df7f81d838288365e152ba4dc406d6a43920dc98a6c6f2592e75ca87a0d45ef319dd973902d8da2d2682e4c7e23df479bfe7be842983506010b524742436f6e7472616374065469636b657205015cd0c3c0db677e225d50c0cd55a38fd2a79d3a29d625e34f78dfd6166c3cb806c554138ee503e5eeaeae035a3039fc99c207d2759d11ec839d848825f8574ca5010b524742436f6e747261637409507265636973696f6e03130b696e646976697369626c65000464656369010563656e746902056d696c6c690309646563694d696c6c69040a63656e74694d696c6c6905056d6963726f0609646563694d6963726f070a63656e74694d6963726f08046e616e6f0908646563694e616e6f0a0963656e74694e616e6f0b047069636f0c08646563695069636f0d0963656e74695069636f0e0566656d746f0f096465636946656d746f100a63656e746946656d746f11046174746f12c6bdee62481531f0f5e0758cda686053c050c4fc4ad1219a5c5b8e5bfdc1b6b1000000d0a0bacb5647452dc535ab3a9535a699a55fa86ff239129719bf2e50046394140005016fc6963706a108342019e8f169da7ef48a8f43c8a818832446f3ee17a8b539bcf0d3a8af463a63cefc4a3a212d49f49137076a787e6f88f986303d0863ddca30010b524742436f6e74726163740c436f6e74726163745465787405013e558ffa0f0c38c22b61be4d110b893694d51c534c706f348af313251ec9033600010e27a1ddfa53b021015034df8a038caa840d9d651fd22b6aa6f892966adf567e0c00035247420300d0000000000001000400000e27a1ddfa53b021015034df8a038caa840d9d651fd22b6aa6f892966adf567e000001236401f5af44397b293eb9073b1849407fbd9b09e8b27d21470a9b5751047f5b00055247423230020c436f6e74726163745465787401f0d3a8af463a63cefc4a3a212d49f49137076a787e6f88f986303d0863ddca3001074e6f6d696e616c01061bc4c82d616bb3b24fd5b33ba6e51fa43ad73377ab0cd4cf49f9aa15a174bf01010641737365747300020000020c436f6e74726163745465787401000100074e6f6d696e616c0100010001064173736574730100ffff0001085472616e73666572000001064173736574730100ffff01064173736574730100ffff0001064173736574730001085472616e7366657200ce7c58bc189e5e4a3d5ceae75adede1931bf2648a716824e14aa9e796d5c91e1236401f5af44397b293eb9073b1849407fbd9b09e8b27d21470a9b5751047f5b020000074e6f6d696e616c01000c436f6e7472616374546578740100000641737365747300010000085472616e7366657200000000ce7c58bc189e5e4a3d5ceae75adede1931bf2648a716824e14aa9e796d5c91e100000002000001000e0005444942413105444942413100020100010007000500444942413101000001010003010035d366e4d016b49a221649063fbfb82e3a3bad491607836b493749433c619b00000000df6d7e377eee98e9080500000000000000ada8fbae4086441a6aff6c3d1968d70ecbbe44bd782abdd8b8e9c66cf784c4ec0000000000000000000000000000".to_string(),
    };

    let req = serde_wasm_bindgen::to_value(&contract_import).expect("oh no!");
    let _ = resolve(import_contract(sk, req)).await;
}

#[wasm_bindgen_test]
async fn asset_transfer() {
    set_panic_hook();

    let mnemonic = env!("TEST_WALLET_SEED", "TEST_WALLET_SEED variable not set");

    // Import wallet
    let mnemonic_data_str = resolve(save_mnemonic_seed(
        mnemonic.to_owned(),
        ENCRYPTION_PASSWORD.to_owned(),
        SEED_PASSWORD.to_owned(),
    ))
    .await;

    let mnemonic_data: MnemonicSeedData = json_parse(&mnemonic_data_str);

    // Get vault properties
    let wallet_data_str: JsValue = resolve(get_encrypted_wallet(
        ENCRYPTION_PASSWORD.to_owned(),
        mnemonic_data.serialized_encrypted_message,
    ))
    .await;
    let wallet_data: EncryptedWalletData = json_parse(&wallet_data_str);

    info!("Get Wallets");
    let assets_wallet = resolve(get_wallet_data(
        wallet_data.public.rgb_assets_descriptor_xpub.clone(),
        None,
    ))
    .await;
    let assets_wallet: WalletData = json_parse(&assets_wallet);
    let udas_wallet = resolve(get_wallet_data(
        wallet_data.public.rgb_udas_descriptor_xpub.clone(),
        None,
    ))
    .await;
    let udas_wallet: WalletData = json_parse(&udas_wallet);

    info!("Check Asset Vault");
    let vault_details = resolve(get_assets_vault(
        wallet_data.public.rgb_assets_descriptor_xpub.clone(),
        wallet_data.public.rgb_udas_descriptor_xpub,
    ))
    .await;
    let vault_details: FundVaultDetails = json_parse(&vault_details);
}
